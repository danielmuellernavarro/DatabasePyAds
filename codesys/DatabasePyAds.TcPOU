<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="DatabasePyAds" Id="{1cdff17f-8c9d-44d9-9179-6800118b6805}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM DatabasePyAds
VAR_INPUT
	bTest: BOOL;

	bSetLog: BOOL;
	sLogMsg: STRING(MAX_STRING_LENGTH);
END_VAR

VAR_OUTPUT
	stTestQuit: ST_PyAds_OUTPUT;
END_VAR

VAR
	bExecute: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bBusy: BOOL;
	stConfig: ST_PyAdsConfig;
	
	diRows			: DINT;
	diColumns		: DINT;
	saRequest 		: ARRAY[1..diUBoundRequestArray] OF STRING(diMaxStringLength);
	saColumnsName	: ARRAY[1..diMaxColumns] OF STRING(diStringLength);
	saTableValues 	: ARRAY[1..diMaxRows, 1..diMaxColumns] OF STRING(diMaxStringLength);
	sError			: STRING(diMaxStringLength);
	sVersion		: STRING(diStringLength);
	
	tonTimeout: TON := (PT:= T#60S);
	iStateBranch: INT;
	iStateSubBranch: INT;
	i, j: INT;

	bFirstCycle: BOOL := TRUE;
END_VAR

VAR CONSTANT
	diMaxRows 				: UDINT := 200;			// max. rows table array 
	diMaxColumns 			: UDINT := 30;			// max. columns table array 
	diStringLength 			: UDINT := 80;			// string length table array
	diMaxStringLength		: UDINT := MAX_STRING_LENGTH;
	diUBoundRequestArray 	: UDINT := 20;			// request string array size 

	// Databases
	stDbMySql: ST_PyAdsConfig := (
		sDatabase:= 'test', 
		sTypeDatabase:= 'mysql', 
		sHost:= '192.168.1.7', 
		sUser:= 'test', 
		sPassword:= 'test'
	);
	stDbMySql2: ST_PyAdsConfig := (
		sDatabase:= 'test2', 
		sTypeDatabase:= 'mysql', 
		sHost:= '192.168.1.7', 
		sUser:= 'test', 
		sPassword:= 'test'
	);
	stDbMssql: ST_PyAdsConfig := (
		sDatabase:= 'test', 
		sTypeDatabase:= 'mssql', 
		sHost:= '192.168.1.250', 
		sUser:= 'test', 
		sPassword:= 'test'
	);
	
	cReset: INT				:= 0;
	cInitial: INT			:= 1;
	cTest: INT 				:= 10;
	cLog: INT 				:= 100;

	stQuitNull: ST_PyAds_OUTPUT := (bBusy:= FALSE, bDone:= FALSE, bDone:= FALSE);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstCycle THEN
	bFirstCycle := FALSE;
	sLogMsg := 'Die SPS wurde neu gestartet';
	bSetLog := TRUE;
END_IF

IF tonTimeout.Q THEN
	sError := CONCAT('DatabasePyAds Timeout. iStateBranch:', INT_TO_STRING(iStateBranch));
	sError := CONCAT(sError, CONCAT(', ', INT_TO_STRING(iStateSubBranch)));
	LogData(sMessage := sError, eLogMode := eAdd);
	iStateBranch := 0;
	iStateSubBranch := 0;
	bError := TRUE;
	bExecute := FALSE;
END_IF
IF NOT bBusy AND iStateBranch > cInitial AND NOT bTest THEN
	tonTimeout();
END_IF

CASE iStateBranch OF
cReset:
	stTestQuit := stQuitNull;
	
	tonTimeout(IN:= FALSE);
	stConfig := stDbMySql; (* default database *)
	iStateBranch := iStateBranch + 1;
	
cInitial:
	IF bBusy THEN
		;
	ELSIF bTest THEN
		iStateBranch := cTest;
	ELSIF bSetLog THEN
		stConfig := stDbMssql;
		iStateBranch := cLog;
	END_IF
	
	IF iStateBranch <> cInitial THEN
		tonTimeout(IN:= TRUE);
		bDone := FALSE;
		bError := FALSE;
		// clean strings
		MEMSET(ADR(saRequest), 0, SIZEOF(saRequest));
		MEMSET(ADR(saColumnsName), 0, SIZEOF(saColumnsName));
		MEMSET(ADR(saTableValues), 0, SIZEOF(saTableValues));	
		MEMSET(ADR(sError), 0, SIZEOF(sError));	
	END_IF
	
cTest:
	Test(
		bRunQuery 		:= bTest, 
		stRunQueryQuit 	=> stTestQuit
	);
	
cLog:
	SetLog(
		bRunQuery 		:= bSetLog
	);
		
END_CASE;]]></ST>
    </Implementation>
    <Method Name="SetLog" Id="{09b915a1-0939-4035-bb3a-abf6f686ae35}">
      <Declaration><![CDATA[METHOD SetLog
VAR_IN_OUT
	bRunQuery: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE iStateSubbranch OF
0:
	i := 1;
	saRequest[i] := 'INSERT INTO sps_log';
	i := i + 1;
	saRequest[i] := ' ';
	i := i + 1;	
	saRequest[i] := '(machine_id, msg)';
	i := i + 1;
	saRequest[i] := ' ';
	i := i + 1;	
	saRequest[i] := 'VALUES (';
	i := i + 1;		
	saRequest[i] := UINT_TO_STRING(gstConfig.nMaschineId);
	i := i + 1;
	saRequest[i] := ',"';
	i := i + 1;		
	saRequest[i] := sLogMsg;
	i := i + 1;
	saRequest[i] := '")';

	bExecute := TRUE;
	iStateSubbranch := iStateSubbranch + 1;
1:
	IF NOT bExecute THEN
		iStateSubbranch := iStateSubbranch + 1;
	END_IF
2:
	IF bDone OR bError THEN
		bRunQuery := FALSE;
		iStateBranch := cReset;
		iStateSubbranch := cReset;
	END_IF
END_CASE

IF tonTimeout.Q THEN
	bRunquery := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test" Id="{fc489204-4cf2-4e3b-a31e-be85d2fc4c4a}">
      <Declaration><![CDATA[METHOD Test
VAR_IN_OUT
	bRunQuery: BOOL;
END_VAR
VAR_OUTPUT
	stRunQueryQuit: ST_PyAds_OUTPUT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE iStateSubbranch OF
0:
	stRunQueryQuit.bBusy := TRUE;
	
	i := 1;
	saRequest[i] := 'SELECT SUBSTRING(DATE_FORMAT';
	i := i + 1;
	saRequest[i] := '(NOW(3), $'%Y-%m-%d-%H:%i:%S.%f$'),1,23'; (* https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html *)
	i := i + 1;	
	saRequest[i] := ')';
	i := i + 1;
	saRequest[i] := 'AS server_time';

	bExecute := TRUE;
	iStateSubbranch := iStateSubbranch + 1;
1:
	IF NOT bExecute THEN
		iStateSubbranch := iStateSubbranch + 1;
	END_IF
2:
	IF bDone OR bError THEN
		stRunQueryQuit.bDone := bDone;
		stRunQueryQuit.bDone := bError;
		iStateSubbranch := iStateSubbranch + 1;
	END_IF
3:
	IF NOT bRunQuery THEN
		iStateBranch := cReset;
		iStateSubbranch := cReset;
	END_IF
END_CASE

IF tonTimeout.Q THEN
	bRunquery := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="DatabasePyAds">
      <LineId Id="4308" Count="21" />
      <LineId Id="4342" Count="9" />
      <LineId Id="4365" Count="0" />
      <LineId Id="4485" Count="0" />
      <LineId Id="4366" Count="0" />
      <LineId Id="4384" Count="18" />
      <LineId Id="4439" Count="3" />
      <LineId Id="4484" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="DatabasePyAds.SetLog">
      <LineId Id="51" Count="7" />
      <LineId Id="110" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="120" Count="2" />
      <LineId Id="59" Count="6" />
      <LineId Id="94" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="127" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="DatabasePyAds.Test">
      <LineId Id="7" Count="1" />
      <LineId Id="41" Count="1" />
      <LineId Id="9" Count="17" />
      <LineId Id="43" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="32" Count="3" />
      <LineId Id="51" Count="2" />
      <LineId Id="50" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>